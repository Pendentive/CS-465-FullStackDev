# CS-465-FullStackDev
CS-465 Full Stack Development with MEAN


## Architecture
Trvlr Getaways uses the MEAN stack for its flexibility, maintainability, and robust documentation, ensuring extensibility for future development. Express, with Handlebars, manages the customer-facing front-end, offering server-side rendering and dynamic HTML generation. JavaScript and TypeScript are used throughout the project to handle application logic, ensuring consistency and leveraging modern ES6+ features. Angular provides a powerful, component-based framework to develop the Admin front-end, while MongoDB, accessed via Mongoose, serves as the back-end database. 

MongoDB was chosen for its schemaless design, which allows dynamic, unstructured data storage, making it ideal for a project that requires adaptability and rapid iteration. Unlike relational databases, MongoDB simplifies scaling and aligns with the fast-paced, object-oriented nature of JavaScript development.

## Functionality
While JSON and JavaScript are foundational to the application, they serve distinct yet complementary roles. JSON, as a lightweight data interchange format, is primarily used to transmit structured data between the front-end and back-end. For example, JSON responses are utilized to provide Angular with dynamic content updates or to populate customer-facing pages. JavaScript, on the other hand, powers the logic and interactivity of both the front-end and back-end, enabling dynamic DOM manipulation, data processing, and API handling. Together, JSON bridges the gap between the Angular front-end and the Express API back-end, enabling seamless communication and integration across the application.

The application underwent refactoring to improve consistency and adhere to modern best practices. The customer-facing front-end was transitioned from standard Handlebars to Express-Handlebars, which introduced a more modular and maintainable templating approach. Express-Handlebars supports layout and partial templates, reducing redundancy and enhancing maintainability. Observables were extensively adopted to handle asynchronous operations efficiently, ensuring robust data streams and event-driven behavior. Observables are particularly advantageous in MEAN applications due to their ability to handle complex asynchronous workflows, offer declarative data streams, and support features like retry mechanisms and cancellation, making them superior to traditional callbacks or promises in scenarios requiring extensive event handling.

## Testing
Security considerations were embedded into the project from its inception, requiring thorough testing to ensure both unauthorized access prevention and smooth functionality for authenticated users. Postman was employed to validate API endpoints, testing with and without authorization tokens to verify secure access control. GET requests, which retrieve data from the server, were tested for proper response codes and accurate data retrieval. POST requests, used for creating new records, were validated to ensure input validation and proper database updates. PUT requests, which update existing records, were scrutinized to ensure that only authorized users could perform updates and that data integrity was preserved. DELETE requests, designed to remove data, were tested for appropriate permissions and impact, ensuring critical records couldn’t be removed without proper authorization. This comprehensive testing methodology ensured that the API was both functional and secure.

## Reflection
This course has been instrumental in helping me achieve my professional goals, particularly in bridging my knowledge gap in full-stack development. By completing this project, I not only gained the ability to create web applications from scratch but also learned how to design and implement custom components that align with client or team objectives. Integrating security into an API and creating authenticated endpoints were significant milestones, providing me with confidence in building secure and scalable systems. Additionally, my skills in HTML and JavaScript have greatly improved, and I’ve developed a deeper understanding of TypeScript and Angular. These new capabilities have enhanced my marketability as a developer, equipping me with the tools and knowledge to succeed in a competitive industry.
